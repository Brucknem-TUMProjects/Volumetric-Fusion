#pragma once

#include <solo/utils/Common.h>
#include <common_utils/meta_structures/BasicTypes.h>
#include <common_utils/meta_structures/SoA.h>
#include <solo/meta_structures/TypeFinder.h>
#include <solo/meta_structures/Dual.h>
#include <solo/optimization_algorithms/SolverInterface.h>
#include <solo/constraint_evaluation/AutoDiffCostFunction.h>
#include <solo/constraint_evaluation/Bridge.h>

using common_utils::NullType;
using common_utils::EmptyType;
using common_utils::SoA;
using common_utils::SoASize;
using common_utils::SoAType;
using common_utils::SoAPointerList;
using common_utils::MemoryContainer;
using common_utils::MemoryTypeCPU;
using common_utils::MemoryTypeCUDA;
using common_utils::TL;
using common_utils::TypeAt;
using common_utils::I;
using common_utils::Unsigned2Type;
using common_utils::Int2Type;
using common_utils::Type2Type;
using solo::BaseType;
using solo::ResultType;
using solo::Param;
using solo::Params;
using solo::Constraint;
using solo::DataHolder;
using common_utils::Tuple;
using common_utils::makeTuple;
using common_utils::static_for;
using solo::Bridge;
using solo::real;
using common_utils::AddElements;