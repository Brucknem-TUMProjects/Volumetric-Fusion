#version 430

uniform int INVALID_TSDF_VALUE;
uniform float resolution;
uniform float resolutionInv;
uniform vec3 size;
uniform vec3 sizeHalf;
uniform ivec3 sizeNormalized;
uniform vec3 origin;
uniform mat4 relativeTransformation;
uniform mat4 coordinate_correction;
uniform float new_tsdf;
uniform bool setPosition;
uniform bool clearAsFirstFrame;

uniform mat3 world2CameraProjection;
uniform mat3 colorWorld2CameraProjection;
uniform float truncationDistance;

uniform sampler2D colorFrame;
uniform vec2 colorResolution;

uniform usampler2D depthFrame;
uniform vec2 depthResolution;
uniform float depthScale;

layout (local_size_x = 32) in;

struct VtxData {
   vec4 vtx_pos;       // 4N [GOOD] -- Largest base alignment
   vec4 vtx_tsdf;
   vec4 vtx_color;
};                      // ^^ 8 * sizeof (GLfloat) per-vtx

// std140 is pretty important here, it is the only way to guarantee the data
//   structure is aligned as described above and that the stride between
//     elements in verts[] is 0.
layout (std140, binding = 0) buffer VertexBuffer {
   VtxData verts [];
};

vec3 unhash(uint hash){
    int x = int(hash % int(sizeNormalized.x));
    int y = int(int(hash / sizeNormalized.x) % int(sizeNormalized.y));
    int z = int(int(hash/ int(sizeNormalized.x * sizeNormalized.y)) % int(sizeNormalized.z));

    vec3 pos = vec3(x, y, z);
    pos *= resolution;
    pos -= sizeHalf;
    pos += origin;

    return pos;
}

void main(){	
    uint hash = gl_GlobalInvocationID.x;

    if(setPosition) {
        vec3 pos = unhash(hash);
        verts[hash].vtx_pos = vec4(pos, 1);
        verts[hash].vtx_tsdf = vec4(hash, 0, 0, INVALID_TSDF_VALUE);
        return;
    }

    if(clearAsFirstFrame){
        verts[hash].vtx_tsdf = vec4(hash, 0, 0, INVALID_TSDF_VALUE);
        verts[hash].vtx_color = vec4(0, 0, 0, 0);
    }

    vec3 projectedVoxelCenter = world2CameraProjection * (relativeTransformation * verts[hash].vtx_pos).xyz;
    
    if(projectedVoxelCenter.z <= 0.1) {
        return;
    }

    vec2 pixelCoordinate = projectedVoxelCenter.xy / projectedVoxelCenter.z;
    
    if(pixelCoordinate.x < 0 || pixelCoordinate.y < 0 || pixelCoordinate.x >= depthResolution.x || pixelCoordinate.y >= depthResolution.y) {
        return;
    }

    pixelCoordinate /= depthResolution;
    float realDepth = texture(depthFrame, pixelCoordinate).x * depthScale;

    if(realDepth <= 0) {
//        verts[hash].vtx_tsdf = vec4(hash, 0, 0, INVALID_TSDF_VALUE);
        return;
    }
    
    float tsdf = projectedVoxelCenter.z - realDepth;
    if(abs(tsdf) > truncationDistance){
        return;
    }
//    float tsdf = clamp(, -truncationDistance, truncationDistance);
    
//    float oldWeight = ;
//    float oldTsdf = ;
//    float newWeight = ;

    tsdf = (verts[hash].vtx_tsdf.y * verts[hash].vtx_tsdf.z + tsdf) / (verts[hash].vtx_tsdf.z + 1);
    
    verts[hash].vtx_tsdf = vec4(hash, tsdf, (verts[hash].vtx_tsdf.z + 1), 0);
    
    verts[hash].vtx_color = (verts[hash].vtx_color * verts[hash].vtx_tsdf.z + texture(colorFrame, pixelCoordinate)) / (verts[hash].vtx_tsdf.z + 1);
}